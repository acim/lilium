// +build race

package pool_test

import (
	"net/url"
	"sync"
	"testing"

	"it-agenten.com/billiger.de/iapi/backend/cluster/pool"
)

func TestReadWriteConcurrency(t *testing.T) {
	ns := nodes()
	p, _ := pool.New(ns, pool.Random)
	s := map[url.URL]bool{
		url.URL{Scheme: "http", Host: "127.0.0.1"}: true,
		url.URL{Scheme: "http", Host: "127.0.0.2"}: false,
		url.URL{Scheme: "http", Host: "127.0.0.3"}: true,
	}

	wg := sync.WaitGroup{}
	for i := 0; i < 20; i++ {
		wg.Add(1)
		go func() {
			defer wg.Done()
			p.GetNode()
		}()
		wg.Add(1)
		go func() {
			defer wg.Done()
			p.UpdateStatus(&s)
		}()
	}
	wg.Wait()
}

func TestRandomPoolConcurrency(t *testing.T) {
	testReadConcurrency(t, pool.Random)
}

func TestRoundRobinPoolConcurrency(t *testing.T) {
	testReadConcurrency(t, pool.RoundRobin)
}

func testReadConcurrency(t *testing.T, pp pool.PoolingPolicy) {
	ns := nodes()
	p, _ := pool.New(ns, pp)

	wg := sync.WaitGroup{}
	for i := 0; i < 20; i++ {
		wg.Add(1)
		go func() {
			defer wg.Done()
			p.GetNode()
		}()
	}
	wg.Wait()
}
